openapi: 3.0.3
info:
  title: Rizzlet
  description: This is a competitive, interactive study tool!
  version: 0.1.0
servers:
  - url: http://localhost:8000/api/
tags:
  - name: Questions
  - name: Class
  - name: Auth
paths:
  /class:
    post:
      tags:
        - Class
      summary: Add a class
      operationId: class
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
            example:
              name: "CSC 308"

        required: true
      responses:
        "201":
          description: Successful operation
        "422":
          description: Validation exception
        "500":
          description: Server Exception
    get:
      tags:
        - Class
      summary: Get all classes
      operationId: getAllClasses
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "422":
          description: Validation exception
        "500":
          description: Server Exception
  /user/classes:
    get:
      tags:
        - User
      summary: Get all classes for a user
      operationId: userClasses
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
        "422":
          description: Validation exception
        "500":
          description: Server Exception
  /class/topFour:
    post:
      tags:
        - Class
      summary: Get the top ten users for a class, always including the logged in one
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                classId:
                  type: string
            example:
              classId: "65d679f08f3afb1b89eebfc3"
      operationId: getTopFour
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  topFour:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                        score:
                          type: number
        "422":
          description: Validation exception
        "500":
          description: Server Exception
        "401":
          description: Unauthorized
  /game/{classId}/group:
    get:
      parameters:
        - in: path
          name: classId
          schema:
            type: string
            example: 65d679f08f3afb1b89eebfc3
          required: true
          description: Class ID
      tags:
        - Game
      summary: Get the group for that class game for the user logged in
      operationId: getUserGroup
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  topFour:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                        score:
                          type: number
        "422":
          description: Validation exception
        "500":
          description: Server Exception
        "401":
          description: Unauthorized
  /hello:
    post:
      tags:
        - hello
      summary: Say hello
      operationId: hello
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
            example:
              name: "Dylan"

        required: true
      responses:
        "200":
          description: Successful operation
          content:
            text/plain; charset=utf-8:
              examples:
                My name is Dylan:
                  value: '"My name is Dylan!"'
        "422":
          description: Validation exception
        "500":
          description: Server Exception
  /question:
    post:
      tags:
        - Questions
      summary: Add a given question to the database
      operationId: addQuestion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        "422":
          description: Validation exception
        "500":
          description: Server Exception
        "401":
          description: Unauthorized
    get:
      tags:
        - Questions
      summary: Get all questions
      operationId: getAllQuestions
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionWithName"
        "422":
          description: Validation exception
        "500":
          description: Server Exception
  /question/{questionId}/rating:
    post:
      tags:
        - Questions
      summary: Add a given question to the database
      parameters:
        - in: path
          name: questionId
          schema:
            type: string
          required: true
          description: ID of question to submit rating for
      operationId: addQuestionRating
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionRating"
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        "422":
          description: Validation exception
        "500":
          description: Server Exception
        "401":
          description: Unauthorized
  /auth/google:
    post:
      tags:
        - Auth
      summary: Try to login with google's auth code
      operationId: authGoogle
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authorizationCode:
                  type: string
        required: true
      responses:
        "200":
          description: Auth Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  id:
                    type: string
                  sub:
                    type: string
        "400":
          description: Auth code validation error
        "422":
          description: Validation exception
        "500":
          description: Server exception
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout of Rizzlet
      operationId: logout
      responses:
        "204":
          description: Logout Success
  /inventory:
    post:
      tags:
        - Inventory
      summary: Add an item to a user's inventory
      operationId: addToInventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                classId:
                  type: string
                itemId:
                  type: string
                quantity:
                  type: integer
                  default: 1
            example:
              userId: "user123"
              classId: "class456"
              itemId: "item789"
              quantity: 1
      responses:
        "201":
          description: Item added to inventory successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        "400":
          description: Invalid request parameters
        "500":
          description: Server error

  /inventory/{userId}/{classId}:
    get:
      tags:
        - Inventory
      summary: Get the inventory of a user for a specific class
      operationId: getInventory
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: classId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        "404":
          description: Inventory not found
        "500":
          description: Server error

  /inventory/{id}:
    delete:
      tags:
        - Inventory
      summary: Remove an item from inventory
      operationId: removeFromInventory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Item removed from inventory successfully
        "404":
          description: Item not found in inventory
        "500":
          description: Server error
  /items:
    post:
      tags:
        - Items
      summary: Add a new item
      description: Create a new item with a name, description, and cost.
      operationId: addItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                cost:
                  type: integer
              required:
                - name
                - description
                - cost
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid input
        '500':
          description: Server error
  /items/{itemId}:
    put:
      tags:
        - Items
      summary: Update an existing item
      operationId: updateItem
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: string
          description: The ID of the item to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - cost
              properties:
                name:
                  type: string
                description:
                  type: string
                cost:
                  type: number
      responses:
        '200':
          description: Successfully updated the item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
        '500':
          description: Internal server error

components:
  schemas:
    QuestionWithName:
      required:
        - question
        - answer
        - createdBy
      type: object
      properties:
        _id:
          type: string
        type:
          type: string
          enum:
            - true/false
        question:
          type: string
        answer:
          type: boolean
        createdBy:
          type: object
          properties:
            _id:
              type: string
            firstName:
              type: string
            lastName:
              type: string
    Question:
      required:
        - question
        - answer
      type: object
      properties:
        type:
          type: string
          enum:
            - true/false
        question:
          type: string
        answer:
          type: boolean
    QuestionRating:
      required:
        - difficultyRating
        - relevancyRating
      type: object
      properties:
        difficultyRating:
          type: number
          minimum: 1
          maximum: 5
        relevancyRating:
          type: number
          minimum: 1
          maximum: 5
